SETTING UP THE DATABASE FOR THE HOTEL RESERVATION SYSTEM PROJECT


This project will store data in a PostgreSQL database and it will use Entity Framework Core for
the ORM. EF Core acts as a translation layer between the Hotel Reservation project and the 
database, translating C# code into SQL commands and C# objects into records in the database, all 
without writing SQL.

                   PROGRAM <----> ENTITY FRAMEWORK CORE <----> DATABASE

If EF Core is to perform these translations, it must understand the topology of the database. To
that end, EF Core needs to know the following:

     1) Data Provider,              (Defined in DbContextFactory/MyDbContextFactory.cs)
     2) Data Model,                 (Defined in DbContext/Context.cs)
     3) Database Schema             (Generated into the Migrations Folder)

Here's a short summary: 

The Data Provider is a small library that helps EF Core to talk to databases from a given vendor.
For instance, there are Data Providers for SQL Server, SQLite, PostgreSQL and other databases.
The general layout of the database and its entities are defined in the Data Model. The DM is
contained in Context.cs. The Schema is the more specific database layout. It is a map to the 
current topology of the database and it can be generated on command from the Data Model. 

In the course of developing a database, it gains or loses tables and other entities over time. The
relationships between entities also changes. In other words, the topology of the database is 
changing. The schema serves as a snapshot of the topology of a database at certain point in time. 
Schema snapshots are called migrations. They are used to update or rollback instances of the 
database. Unsurprisingly, you can find them in the Migrations folder.


DATA PROVIDERS
 
A Data Provider is a "a software library consisting of classes that provide data access 
services such as connecting to a data source, executing commands at a data source and fetching 
data from a data source with support to execute commands within transactions. It resides as a 
lightweight layer between data source and code, providing data access services with increased 
performance." (Source: https://www.techopedia.com/definition/25227/net-data-provider). 
 
EF Core can talk to any database if it has the data provider library for it. The Data Provider
for this project is the Npgsql.EntityFrameworkCore.PostgreSQL package, which was added via Nuget.
When HotelApi runs, Entity Framework will search for a Data Provider. EF Core will use the Data
Provider to determine that this project uses a PostgreSQL database. 

With the help of the PostgreSQL Data Provider, EF Core will will use the Data Model to transform a 
SQL query into an object model representation of a query (which is called a canonical command tree) 
and vice versa. .NET Data Providers can consume canonical command trees to talk the database.

Go to DbContextFactory/MyDbContextFactory.cs to configure the PostgreSQL database.


DATABASE DATA MODEL vs. DATABASE SCHEMA

In order to do two-way translations, the ORM library (EF Core) needs a Data Model of the
database. A Data Model is an abstract formalization of the entities in a database and their
relationships. It also conceptually standardizes how entites relate to one another. The Data 
Model is distinct from a Database Schema; see this StackOverflow Answer from richik jaiswal:

     A schema is a blueprint of the database which specifies what fields will be present and 
     what their types will be. For example an employee table will have an employee_ID column 
     represented by a string of 10 digits and an employee_Name column with a string of 45 
     characters.
     
     Data model is a high level design implementation which decides what can be present in the 
     schema. It provides a database user with a conceptual framework in which we specify the 
     database requirements of the database user and the structure of the database to fulfill 
     these requirements.
     
     A data model can, for example, be a relational model where the data will be organised in 
     tables whereas the schema for this model would be the set of attributes and their 
     corresponding domains.
     
     (Source: https://stackoverflow.com/questions/25093452/difference-between-data-model-and-database-schema-in-dbms)

Therefore, a Data Model is a general blueprint that defines some properties of the Schema. Taken
from Context.cs, here is the Data Model for a Hotel table:


    public class Context : DbContext
    {
        public virtual DbSet<Hotel> Hotels { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Hotel>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).IsRequired().ValueGeneratedOnAdd();
                entity.Property(e => e.Name).IsRequired().HasMaxLength(100);
                entity.Property(e => e.Address).IsRequired().HasMaxLength(200);
                entity.Property(e => e.PhoneNumber).IsRequired().HasMaxLength(100);
            });
        }
    }
        
It specifies general properties of the columns in the Hotel Table. A data structure is defined to 
hold the properties, followed by definitions of these properties. HasKey() denotes the Id field as 
the Primary Key of a table. The other properties are defined with the Property() method. The Id, 
Name, Address and PhoneNumber fields are marked as required fields. The character lengths of each 
field is also specified. The purpose of a Data Model is to broadly define the shape and form of 
the entities in a database in a high-level fashion. 

The Data Model is a conceptual framework that constrains the contents of the Schema. EF Core 
probably combines the type information from the Model classes with the Data Model defined in this 
file to generate the SCHEMA. A Database Schema is a more concrete set of rules that govern the 
database. 

There are schemas for at least three levels of a database: physical schema (how data blocks are
stored at the lowest level; this is where database designers work), logical schema (how records
get stored in data structures; this level is where programmers and DB administrators work) and
view schemas (which are schemas for end-user interaction). 

Taken from the file called, 20180128032156_CreateHotelHotelRoomRoomTypeBedTypeRoomReservationTables.cs,
this is the Logical schema for the Hotel table: 

    public partial class CreateHotelHotelRoomRoomTypeBedTypeRoomReservationTables : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Hotels",
                columns: table => new
                {
                    Id = table.Column<long>(type: "int8", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy",
                                     NpgsqlValueGenerationStrategy.SerialColumn),
                    Address = table.Column<string>(type: "varchar(200)",
                                                   maxLength: 200,
                                                   nullable: false),
                    Name = table.Column<string>(type: "varchar(100)",
                                                maxLength: 100,
                                                nullable: false),
                    PhoneNumber = table.Column<string>(type: "varchar(100)",
                                                       maxLength: 100,
                                                       nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hotels", x => x.Id);
                });
        }
    }

The Hotel entity defined the Data Model is explicitly defined as a Hotels Table in the schema.
This table's columns are given names defined in the Data Model. The schema goes further and
assigns types to each column, and other properties such as nullability and annotations. Note that
the character length of the columns are inherited from the Data Model.