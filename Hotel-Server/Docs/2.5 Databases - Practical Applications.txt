1. SETTING UP THE DATABASE FOR THE HOTEL RESERVATION SYSTEM PROJECT

This program will store data in a PostgreSQL database and it will use Entity Framework 
Core (EFC) as the ORM. This article will discuss some of the practical aspects of hooking
up a program to the database.


    2.    PostgreSQL: Installation and Configuration
    2.1   PostgreSQL's Architecture
    2.2   The Installation Process
    2.3   Post-Installation Setup
    2.3.1 Check If the Path Variable Has Been Configured Correctly
    2.3.2 Ensure that the Directory that Contains Data To Be Loaded into PostgreSQL has 
          Proper Permissions (in Windows OSes) 
    2.4   Creating a New Server Instance
    2.5   Creating a New Database
    
    3.    Setting Up the Database
    3.1   The Connection String
    3.2   The Context Class


2. POSTGRESQL: INSTALLATION AND CONFIGURATION

I'll be using PostgreSQL 11.1 as the database for this project. On page xxxix, the 
PostgreSQL Manual v11.1 provides a short explanation of what PostgreSQL is: "PostgreSQL 
is an object-relational database management system (ORDBMS) based on  POSTGRES, Version 
4.2, developed at the University of California at Berkeley Computer Science Department." 
[1]


2.1 POSTGRESQL'S ARCHITECTURE

Before installing PostgreSQL, here's a rather long quote from Page 3, Chapter 1, 
Section 1.2 of the PostgreSQL manual. It explains the architectural fundamentals of 
PostgreSQL[1]:


    Before we proceed, you should understand the basic PostgreSQL system architecture. 
    Understanding how the parts of PostgreSQL interact will make this chapter somewhat 
    clearer.
    
    In database jargon, PostgreSQL uses a client/server model. A PostgreSQL session 
    consists of the following cooperating processes (programs):
    
    
        * A server process, which manages the database files, accepts connections to the 
          database from client applications, and performs database actions on behalf of 
          the clients. The database server program is called postgres. 

        * The user's client (frontend) application that wants to perform database 
          operations. Client applications can be very diverse in nature: a client could 
          be a text-oriented tool, a graphical application, a web server that accesses 
          the database to display web pages, or a specialized database maintenance tool. 
          Some client applications are supplied with the PostgreSQL distribution; most 
          are developed by users.
              
    
    As is typical of client/server applications, the client and the server can be on 
    different hosts. In that case they communicate over a TCP/IP network connection. You 
    should keep this in mind, because the files that can be accessed on a client machine 
    might not be accessible (or might only be accessible using a different file name) on 
    the database server machine.
    
    The PostgreSQL server can handle multiple concurrent connections from clients. To 
    achieve this it starts (“forks”) a new process for each connection. From that point 
    on, the client and the new server process communicate without intervention by the 
    original postgres process. Thus, the master server process is always running, waiting 
    for client connections, whereas client and associated server processes come and go. 
    (All of this is of course invisible to the user. We only mention it here for 
    completeness.)


2.2 THE INSTALLATION PROCESS

PostgreSQL has several distributions. As of November 2018, PostgreSQL's website offers 
two graphical installers, one from BigSQL and the other from EnterpriseDB. I recommend 
the BigSQL distro as its installer is less finicky. The installation process should be 
fairly straightforward. Just be sure to write down the values for these fields, because 
you will need them later:


1. HOST NAME: The name or IP address of the computer you are running PostgreSQL. In 
   computer networking, 'localhost' is a hostname that means "this computer". You should
   use this value unless you're doing advanced work like installing to a server.

2. DEFAULT USER NAME: PostgreSQL normally creates a default user. By default, the user 
   name is 'postgres'.

3. DEFAULT USER'S PASSWORD: This is something you must specify. 

4. DEFAULT DATABASE NAME: PostgreSQL creates a default database for the default user. The 
   default name of this database is 'postgres'. 

5. DEFAULT POSTGRESQL PORT: This is the port that PostgreSQL server listens on for 
   incoming requests. The default port number is 5432. Don't change it unless you know 
   what you're doing.
   
   
When you install a PostgreSQL distro, you are installing the database server and an 
assortment of command line utilities. The PostgreSQL distro may also come with a 
graphical client, which you will need to interact with the database.
 
You can use a database-agnostic client like DBeaver, but I have had poor experiences with
it. I prefer pgAdmin 4 even though its a Web client. It is ugly but it works. Whatever 
your preference, if you want a graphical client, make sure to install it before 
continuing.


2.3 POST-INSTALLATION SETUP
 
2.3.1 CHECK IF THE PATH VARIABLE HAS BEEN CONFIGURED CORRECTLY

First, you have to check if the installation went smoothly. You also need to know if the
PATH environment variables have been set correctly by the installer. You can check this 
by opening a command prompt window and typing in this command: 


    psql -U postgres postgres
    
    
The command is formatted like this: 'psql -U [user_name] [database_name]'.  You are 
calling up psql, which is an interactive terminal application frontend to PostgreSQL. 
Then, you are logging into the default superuser account, 'postgres' and requesting the 
default database, 'postgres'. 

If the command prompt changes to 'postgres=#', then you have successfully logged into 
PostgreSQL. This means that your path variables are properly configured. 
                                                                                  
If this login attempt fails, navigate to the PostgreSQL installation directory and find 
the 'bin' directory. In Windows, it should be located in C:\...\PostgreSQL\pgXX\bin\. 
Copy the address. 

Then, start pgAdmin4. In the black taskbar at the top of the screen, go to 
File > Preferences. In the 'Preferences' pop-up window, look for 'Paths' on the left side 
of the screen. Click on the 'Binary Paths' options in the 'Paths' tree and shift your 
attention to the right-side of the screen. Look for a label called 'PostgreSQL Binary 
Path'. Paste the address you copied into this field and then hit 'OK'. 

Lastly, if you have a local firewall or specific networking requirements, see to it that
PostgreSQL is properly configured and routed.


2.3.2 ENSURE THAT THE DIRECTORY THAT CONTAINS DATA TO BE LOADED INTO POSTGRESQL HAS PROPER 
PERMISSIONS (for Windows OSes)

When you try to load existing data sets into PostgreSQL, it sometimes happens that you
will get errors of this kind: 'Could not open file for reading: Permission denied'. This 
happens because the directory which contains .csv file (or whatever the file type of your 
data set) does not provide pgAdmin the permissions it needs.

There are several ways to do this. You can increase permissions for existing user 
accounts or create a new one. The following section explains how to create a new account.

Open File Explorer and navigate to this directory. Right-click on it, and select 
'Properties' . In the pop-up window, go the 'Security' tab. Midway down the page, you 
should have an 'Edit' button. Click on it. 

In the new window, look for an 'Add' button and click on it. This will open a third 
window called 'Select User or Groups'. Look for a field with the label: 'Enter the Object
Names to Select'. Enter the name 'Everyone' and click 'OK'. This should take you back to
the previous window. 

The 'Group or User Names' section should now list the 'Everyone' user. Select it and then
go to the large field below it, which contains lists of permissions. pgAdmin will mainly
need 'Read' rights, so check that. Also check any other permissions you think pgAdmin 
may require. Click 'OK' in all open windows to accept the new changes. 

Try instructing pgAdmin to load data sets again. If you get the same error, try granting 
more permissions or changing the user. 

Once the data set has been loaded into a PostgreSQL database, you should revert changes 
to permissions as this might pose a security risk.


2.4 CREATING A NEW SERVER INSTANCE

After installation, you have to create and turn on a PostgreSQL server instance and 
connect your client (Pgadmin) to it. It appears that this step has to be done via either 
PgAdmin or the terminal, because PostgreSQL does not seem to install and boot up a server 
by default. If you try to connect to the PostgreSQL Server through another client like 
DBeaver, the attempt will fail because the Server has not been created yet.
           
Boot up pgAdmin 4. When it opens up a tab in your browser, go to the black menu bar at 
the top of the webpage. Go to Object > Create > Server.
           
In the 'General' tab, give the server a name. In the 'Connection' tab, give this value 
for the 'Host name/Address' field: localhost. Fill out the 'Password' field as well, 
then check the 'Save Password?' checkbox. If you save the password, you will 
automatically be logged into the Server every time you open PgAdmin 4. 
           
Go with the defaults in the other tabs, at least for PostgreSQL v11.1. Click the 'Save' 
button. If you go to the 'Browser' pane on the left of the screen and click on the plus 
sign next to 'Servers', the tree should expand and your new Server should be visible 
there. Click on the plus sign next to it to see its contents. The default database, 
'postgres', should be displayed there.


2.5 CREATING A NEW DATABASE 
        
In pgAdmin, right-click on the server object or on the default database in PgAdmin 4's 
'Browser' pane. Go to Create > Database.

In the 'General' tab, enter the Database name. For the owner, choose a user and assign 
to them this database. Remember that only the user specified here will be able to access 
the database. Finally, enter a comment that describes this new database. 

In the 'Definition' tab, the fields should usually be set to the following values unless 
you have a good reason to choose other values:


A. Encoding: "specifies the character set encoding for the new database. By default, it 
   is the encoding of the template database."[2]

   By default, the encoding is UTF-8. 


B. Template: "is the name of the database template from which the new database creates. 
   PostgreSQL allows you to create a database based on a template database. The template1 
   is the default template database."[2]
                                
                                
C. Tablespace: "A tablespace is a location on disk where PostgreSQL stores data files 
   containing database objects e.g., indexes., and tables. PostgreSQL uses a tablespace 
   to map a logical name to a physical location on disk.

   PostgreSQL comes with two default tablespaces:
   1) pg_defaulttablespace stores all user data.
   2) pg_globaltablespace stores all global data."[2]

   The default tablespace is the template database's tablespace. In PostgreSQL, that's 
   'pg_default'.
  
                       
D. Collation: "specifies a collation for the new database. The collation specifies the 
   sort order of strings that affect the result of the ORDER BY clause in the SELECT 
   statement. The template database’s collation is the default collation for the new 
   database if you don’t specify it explicitly in the LC_COLLATE parameter."[2]
  
   It appears that 'English_Canada.1252 ' makes the most sense.


E. Character Type: (ctype) "specifies the character classification for the new database. 
   The ctype affects the categorization e.g., digit, lower and upper. The default is the 
   character classification of the template database."[2]
  
   It appears that 'English_Canada.1252 ' makes the most sense.
  
  
F. Connection Limit: "specifies the maximum concurrent connections to the new database. 
   The default is -1 i.e., unlimited. This feature is very useful in the shared hosting 
   environments where you can configure the maximum concurrent connections for a 
   particular database."[2]


The 'Security' and 'Parameters' tabs appear to be for advanced users only. Unless you 
know what you're doing, leave them alone. In the 'SQL' tab, you should see the SQL code 
that was generated by all the choices you made. It looks like this:


   CREATE DATABASE "xxxxx"
       WITH
       OWNER = postgres
       ENCODING = 'UTF-8'
       LC_COLLATE = 'English_Canada.1252'
       LC_CTYPE = 'English_Canada.1252'
       TABLESPACE = pg_default
       CONNECTION LIMIT = -1;
       
   COMMENT ON DATABASE "xxxxx"
       IS "xxxxx" 


****************************************************************************************************
****************************************************************************************************


3. CONNECTING TO A DATABASE FROM A PROGRAM

Now that PostgreSQL has been installed, this section will introduce database 
configuration. This section will be more generic, making it more applicable to databases
from other vendors. 

Before you can do operations on the database, you must initiate a new session with it. 
This will require several pieces of information that must be passed to the database. 

The following sections mention some of them, but others may be required: 


3.1 THE CONNECTION STRING

What is a connection string?[3]:

"Most database providers require some form of connection string to connect to the 
database. Sometimes this connection string contains sensitive information that needs to 
be protected. You may also need to change the connection string as you move your 
application between environments, such as development, testing, and production." 

A connection string is database-related information that you must provide to start a 
session with it. This might include: the hostname of the computer on which the database 
is running, the database's name, user authentication information and DB configuration 
data. You might also include flags intended for ASP.NET Core or the Database itself in
your connection string.

See the seventh article in the sources section for more information. 
 

3.2 THE CONTEXT CLASS (aka DbContext class)

A Context class is an important EF Core class that represents a session with the 
database. According to 'Entity Framework Core: DbContext'[4], DbContext is the class 
with which you can do all of these things:

    
   * Manage database connection
   * Configure model[s] & relationship[s]
   * Query database
   * Saving data to the database
   * Configure change tracking
   * Caching
   * Transaction management
   

A Context class contains the SCHEMA and sometimes the configuration data (of which the 
connection string is usually one part) for a particular database. This bundle of 
information is necessary to start a session with the database. 

When you create a schema, there are two approaches you can take, depending on whether 
you have an existing database. If you are starting a greenfield project WITHOUT an 
existing database, you go with the NEW DATABASE approach. If you have an existing 
database, and you want to write a program to talk to it, you use the EXISTING DATABASE 
approach.


    1. NEW DATABASE: Write your own Context class for your new database.
       For full details, see this project: 'ASPNETCore WebApp 2A - Getting Started with a 
       New Database'
       (More details: https://docs.microsoft.com/en-us/ef/core/get-started/aspnetcore/new-db)
       
    2. EXISTING DATABASE: Generate a Context class from the database via the package 
       manager command line. For full details, see this project: 'ASPNETCore WebApp 2B - 
       New Project With an Existing Database'
       (More details: https://docs.microsoft.com/en-us/ef/core/get-started/aspnetcore/existing-db)


Let's look at the NEW DATABASE approach: you have to create a Context class that inherits 
from 'Microsoft.EntityFrameworkCore.DbContext'. It can be named Context, DbContext, 
HotelContext or something similar.

Once you create a new Context class, you have to define the schema in it. This includes:

    * Defining the program-side equivalent of a table (by declaring a DbSet<T> 
      collection)
      
    * Defining relationships between entities (by declaring them in the OnModelCreating() 
      method) 

See 'Context.cs' in the 'Data' folder for much more information on the schema. 


****************************************************************************************************
****************************************************************************************************


SOURCES

01: PostgreSQL v11.1 Manual (November 2018)
02: http://www.postgresqltutorial.com/
03: https://docs.microsoft.com/en-us/ef/core/miscellaneous/connection-strings
04: http://www.entityframeworktutorial.net/efcore/entity-framework-core-dbcontext.aspx
