1. Table of Contents

This article considers a few indirectly connected concepts as they pertain to Program.cs
and Startup.cs. The topics are as follows:

    2.    What Happens When an Asp.Net Core Program Starts?: A Process
    
    3.1   What is a Web Host?
    3.2   Creating and Booting Up the Host
    3.3   The Host: Configuration Options

    4.1   What is a Server?
    4.2   Types of Servers
    4.3   What is a Web Server?
    4.3.1 How Does a Web Server Communicate Over the Network?
    4.4   Choice of Web Servers
    4.5   Kestrel


****************************************************************************************************
****************************************************************************************************


2. WHAT HAPPENS WHEN AN ASP.NET CORE PROGRAM STARTS?: THE PROCESS

An ASP.NET Core application requires many services to function, like an execution
environment (a process). So, when an application is started, many features and services
have to configured and turned on to support the program. Only then can application itself
be booted. Most of these pre-application services are booted up and/or configured in 
Program.cs and Startup.cs, which is why this article will refer to these files. 

Note that in ASP.NET Core MVC/Razor applications, the user interface layer is the entry 
point of the program. The UI project (layer) must reference the Business Layer 
(ApplicationCore) and its types should interact with the Data Access Layer (aka 
Infrastructure) strictly through interfaces defined in the Business Layer.

Coming back to the entry point, this means that the UI project or layer should contain 
Program.cs and Main(). Main() is the first method to be executed in an ASP.NET Core 
application. By default, the first few instructions in Main() configure and start a Host 
for the program. The Host is the container in which your program will execute. After 
initializing, the Host will configure and boot up these two things at a bare minimum:


    1. A Web Server: to handle incoming HTTP requests,                  (in Program.cs)
    2. A Middleware Pipeline: to process and respond to these requests. (in Startup.cs)


After booting up them up, the Host will connect your web application to the Web Server.
Why do we need a web server and a middleware pipeline? Why does a web application have to 
be connected to a web server?

Recall that websites and web applications tend to have a multi-tier architecture. In a 
client-server architecture, which is common for websites and web apps, one part of your 
program runs on the server and the other part in the user's browser. When the user types
in your website's URL, her request is to the server. The server responds by sending the 
user the client portion of your web application. For a website, this is a static HTML
webpage, but for a web app, the client is a written in Javascript, HTML and CSS. The 
client communicates with the server over the HTTP protocol.
 
Web applications are network-facing, i.e. the client and server communicate with each 
other over a network. To make this happen, the server-side portion of your application 
must be able to handle incoming HTTP requests and respond to them. Managing HTTP requests 
is the duty of a WEB SERVER program. Responding to requests is the job of ASP.NET Core's 
Middleware Services (Such services make up the Request Processing Pipeline. More on this
later in this article.). For these reasons, when the host boots up, at a minimum, it will 
configure a web server and a request processing pipeline.

To do this, the host will need to have configuration information for things like:


    * The web server
    * The ContentRoot and wwwroot directories for the app,
    * Environment variables for the program,
    * .json files with user specified configurations
    * User secrets config values,
    * Logging config defaults,
    * Integrating the IIS web server with the default server (for use as a Reverse
      Proxy),


plus configuration information for all the other parts of the application. The take away 
here is there is a lot of configuration information that the Host needs. Fortunately,
you can rely on default values for most the configuration values, but if you need to 
change default values, you can do so by making changes to either Main() or BuildWebHost()
in Program.cs. Default configuration data for the things listed above is specified in 
this static class and method: Webhost.CreateDefaultBuilder().

In Startup.cs, you can specify the the Middleware services you want to add to your
application and also configure the Request Processing Pipeline. See the Configure() 
method of the Startup class to learn how to create and manage the Request Pipeline.


****************************************************************************************************
****************************************************************************************************


3.1 WHAT IS A WEB HOST?

I can't find a clear definition for a Host. It's an ambiguous term whose meaning varies 
with context. 

In the most often used sense, a web host appears to refer to the bundle of hardware and 
software required to serve up websites. The word appears to be synonymous with
Web Server. In this sense, a host seems be a reference to the physical server and/or the
server application that stores files for one or more websites. In the typical case, when 
a user requests a website or a resource via their browser, the request travels over the 
internet to the web host server, which responds by delivering the requested content, 
provided that the user is authorized to receive it. A Web Hosting Service leases this 
bundle to clients who want to host websites. 

This is related to but different from what the word 'Host' means in .NET/ASP.NET Core
terminology. This appears to the a reference to an OWIN Host, which their website defines
as follows:


    OWIN defines a standard interface between .NET web servers and web applications. The 
    goal of the OWIN interface is to decouple server and application, encourage the 
    development of simple modules for .NET web development, and, by being an open 
    standard, stimulate the open source ecosystem of .NET web development tools.


The specifications page of their website provides the following definitions for software
actors[1]:


    1. Server — The HTTP server that directly communicates with the client and then uses 
       OWIN semantics to process requests. Servers may require an adapter layer that 
       converts to OWIN semantics.
    
    2. Web Framework — A self-contained component on top of OWIN exposing its own object 
       model or API that applications may use to facilitate request processing. Web 
       Frameworks may require an adapter layer that converts from OWIN semantics.
    
    3. Web Application — A specific application, possibly built on top of a Web Framework, 
       which is run using OWIN compatible Servers.
    
    4. Middleware — Pass through components that form a pipeline between a server and 
       application to inspect, route, or modify request and response messages for a 
       specific purpose.
    
    5. Host — The process an application and server execute inside of, primarily 
       responsible for application startup. Some Servers are also Hosts.


As this source informs us, an ASP.NET Core Web application must run inside a container. 
This container is called a Host or Webhost and refers to the process that executes the 
web application. What is a process? A process is a term that is usually synonymous with 
a program. A process is an encapsulated container for a program. It is an independent 
execution environment to which the operating system assigns a slice of computing 
resources. With access to resources like processor time and some RAM to store temporary
data, a process can execute almost any program.  
 
The Host is responsible for application configuration and startup, connecting it to a web 
server and thereafter, the management of the app's lifecycle. Apparently, two kinds of 
host APIs are available[2]: 


    1. Web Host: for hosting web applications.
    2. Generic Host: for hosting non-web applications. (ASP.NET Core 2.1 and later)
    

Below, see some additional notes on Web Hosts and Web Servers[3]. Please note that this
source appears to be out of date, not having been updated since the release of .NET Core
1.0:


    What is a Host?

    ASP.NET Core apps require a host in which to execute. A host must implement the
    IWebHost interface, which exposes collections of features and services, and a Start
    method. The host is typically created using an instance of a WebHostBuilder, which
    builds and returns a WebHost instance. The WebHost references the server that will
    handle requests.

    What is the difference between a host and a server?

    The host is responsible for application startup and lifetime management. The server
    is responsible for accepting HTTP requests. Part of the host’s responsibility includes
    ensuring the application’s services and the server are available and properly
    configured. You can think of the host as being a wrapper around the server. The host
    is configured to use a particular server; the server is unaware of its host.
    

3.2 CREATING AND BOOTING UP THE HOST

As previously mentioned, an ASP.NET Core program's first act is to create and instantiate 
a host for the program. In fact, that's the only thing that Main() seems to do. Main()
calls BuildWebHost() to configure and return a Host object, which it will then turn on.
The code below is from the BuildWebHost() method in Program.cs of this application. Some 
variation of it must run at the start of every ASP.NET Core program:


        public static IWebHost BuildWebHost(string[] args) =>
            WebHost.CreateDefaultBuilder(args)
                .UseStartup<Startup>()
                .Build();


WebHost() is a static class which contains a static method called CreateDefaultBuilder().
The WebHost class "provides convenience methods for creating instances of IWebHost and 
IWebHostBuilder with pre-configured defaults."[4] CreateDefaultBuilder() will create a 
Host, load configuration information into it, and return it to the caller, the Main() 
method. 

The return type of the BuildWebHost() method is IWebHost, which is an interface. An 
IWebHost object represents an configured Host. In ASP.NET Core, all hosts (objects) must 
implement the IWebHost interface. 

Let's take a look at the early lifecycle of your program (We're only concerned with the
Host for now):


    1. When WebHost.CreateDefaultBuilder(args) is invoked, it will initialize a 
       WebHostBuilder object, which must implement the IWebHostBuilder interface. The 
       WebHostBuilder constructor loads some default configuration values into the new 
       WebHostBuilder object. 
       
       The CreateDefaultBuilder() method loads even more default values into the 
       WebHostBuilder object and returns it to the caller, BuildWebHost().
        
    2. Back in BuildWebHost(), the next step is to add user specified configuration 
       values to the Host. In the code snippet above, this is done on line 3. In the 
       Startup class, you can register any ASP.NET Core or third party services that 
       your application may need. In addition, you can configure the middleware layer to 
       alter the request processing pipeline. 
       
    3. After all these things have been added to the Host, BuildWebHost() will build 
       the host and return it to Main(). In Main(), you can further configure some things
       that the Host needs, like the database's context. Finally, the Host is booted up.
       
    4. The Host will turn on all the services your application needs as well as Kestrel 
       for the in-process Web Server. 
       
    5. After all these things have been done, the Host turns on your application. 


3.3 THE HOST: CONFIGURATION OPTIONS 

By default, when an IWebHost instance is created, it needs to be given configuration
parameters. Configuring a web app is complicated because a lot of parameters need to
configured. Fortunately, the configuration required is quite standard because it does
not change between applications or as the application changes over time.

The WebHost class comes with a CreateDefaultBuilder() method, which if called, will
automatically configure and return an IWebHostBuilder object with standard settings
for the Host. The IWebHostBuilder object will in turn create a Host object. This is
what CreateDefaultBuilder() looks like in ASP.NET Core 2.0:


    public static IWebHostBuilder CreateDefaultBuilder(string[] args)
    {
        return new WebHostBuilder()
            .UseKestrel()
            .UseContentRoot(Directory.GetCurrentDirectory())
            .ConfigureAppConfiguration((Action<WebHostBuilderContext, IConfigurationBuilder>) ((hostingContext, config) =>
            {
                // SETUP CONFIGURATION    
            }))
            .ConfigureLogging((Action<WebHostBuilderContext, ILoggingBuilder>) ((hostingContext, logging) =>
            {
                // CONFIGURE LOGGING 
            }))
            .UseIISIntegration()
            .UseDefaultServiceProvider((Action<WebHostBuilderContext, ServiceProviderOptions>) ((context, options) =>
            {
                // SETUP THE DEPENDENCY INJECTION CONTAINER FOR USE
            }
    }


These are the things CreateDefaultBuilder() is doing[5]:


    * CONFIGURES THE DEFAULT WEB SERVER (KESTREL) AND STARTS IT: Configures Kestrel as
      the web server and configures the server using the app's hosting configuration
      providers. For the Kestrel default options, see Kestrel web server implementation
      in ASP.NET Core.

    * CONTENT DIRECTORY: Sets the content root to the path returned by
      Directory.GetCurrentDirectory. 
      ["The content root is the base path to any content used by the app, such as views, 
      Razor Pages, and static assets. By default, the content root is the same as 
      application base path for the executable hosting the app."

      ContentRoot is similar to Web Root (wwwroot). The wwwroot folder contains public 
      static resources, such as HTML, CSS and JavaScript files. ContentRoot contains the
      web app's private internal files. When the Host object is being constructed, by 
      default, the program directory that contains appsettings.json is made the Content 
      Root (aka Content Directory) for that web application.]

    * OPTIONAL CONFIGURATIONS: Loads host configuration from:
          * Environment variables prefixed with ASPNETCORE_ 
            (for example, ASPNETCORE_ENVIRONMENT).
          * Command-line arguments.

    * OPTIONAL CONFIGURATIONS: Loads app configuration from: 
          * appsettings.json.
          * appsettings.{Environment}.json.
          * User secrets when the app runs in the Development environment using the entry 
            assembly.
          * Environment variables.
          * Environment variables prefixed with ASPNETCORE_ 
            (for example, ASPNETCORE_ENVIRONMENT).
          * Command-line arguments.

    * ENABLES LOGGING: Configures logging for console and debug output. Logging includes
      log filtering rules specified in a Logging configuration section of an
      appsettings.json or appsettings.{Environment}.json file.

    * SETS UP KESTREL INTEGRATION WITH IIS: When running behind IIS, enables IIS
      integration. Configures the base path and port the server listens on when using the
      ASP.NET Core Module. The module creates a reverse proxy between IIS and Kestrel.
      Also configures the app to capture startup errors. For the IIS default options, see
      Host ASP.NET Core on Windows with IIS. Sets ServiceProviderOptions.ValidateScopes 
      to true if the app's environment is Development. For more information, see Scope
      validation.


If you want a configuration different from CreateDefaultBuilder()'s default configuration,
you can make changes by calling other methods and passing in different arguments. See
the Microsoft Docs for more information. 

****************************************************************************************************
****************************************************************************************************

4.1 WHAT IS A SERVER?

In computing, as with the term 'host', the term 'server' is overloaded and can be used 
for lots of things. In the context of ASP.NET Core, when I talk about 'servers', the term 
can refer to the physical computer that hosts applications OR the actual program that 
runs on these computers and delivers content to users OR to the combination of hardware 
and software working together. 

In the hardware sense, what is a server? Here is an explanation from an answer to a
question on Quora[6]:


    In a hardware context, a "server" is computer hardware that has been engineered for
    the purpose of hosting large, long-running applications with a high degree of
    reliability and durability. Typically server-class hardware will support more
    processors and more memory than desktop or workstation class hardware, will have
    redundant power supplies and redundant cooling systems, and may have the capability
    to support more hard drives, network interfaces, and other IO options than typically
    found on desktop or workstation class hardware. Hardware components (power supplies,
    fans, hard drives, memory, sometimes even processors) can be removed and replaced
    without shutting down the machine or requiring the operating system to restart.
    Servers typically have very limited video capabilities (although some have
    "headless GPUs" to support GPU-based computation) and usually have no audio 
    capability at all, just a little thing that can go beep. Server-class hardware has 
    been engineered to run continuously for years at a time in temperature-controlled 
    environments. Architecturally, server-grade hardware is not that dissimilar to 
    workstation-grade hardware; it's just engineered for a different level of 
    performance.


Both physical servers and programs that serve content are called servers, but section 4 
is mostly devoted to studying programs that run on server machines, not the machines 
themselves.

What is a server in the software sense? What does it do?

A SERVER is an application that runs passively on a device, listening on a network port
for incoming requests. It stands ready to perform operations or answer inquiries in
response to queries from other programs. Programs that makes queries or requests of the
server are called CLIENTS. The Server and Client form a two-sided distributed,
network-based architecture called the 'Client-Server Model'[7]. Clients and Servers in
this model communicate across a network (via network protocols) even if they are running
on the same machine.

Servers usually don't act on their own; they act in response to client requests. Because
servers are designed to respond to queries, a server program spends most of its time
waiting for requests. A server program is usually not turned off, instead often running
for months, years or even decades without interruption. This is why they run on special
server computers that are designed for reliability and durability. You rarely see server
programs that are intended for long-term, uninterrupted up-time run on phones or desktop 
computers.  


4.2 TYPES OF SERVERS

There are many kinds of servers. At this juncture, a distinction should be made between 
dedicated and virtual servers. When the bundle of hardware and software in one server 
machine performs a single task, it is called a DEDICATED SERVER. For instance, email 
servers are usually dedicated to sending, receiving and storing emails.

Servers can also be VIRTUAL, i.e you can use virtualization software to run several 
virtual operating systems at once on one machine. You can deploy server apps in each of 
these virtual environments to maximize the use of a physical server's capabilities. In 
this way, you can run dozens of instances of your server across many virtual environment 
on a single server machine or even across multiple machines. Each server program can now 
act like a dedicated server. However if too many server programs reside on one machine or 
if a single ravenous server starts hogging resources, it can negatively impact
performance for all virtual servers on that machine.

Servers can also be categorized according to purpose. Here is a partial list of server 
types:


    * Email Servers: Mail servers move and store email across the internet and corporate
      intranets.

    * Proxy Servers: "A proxy server is a server that sits between a client application,
      such as a Web browser, and a real server. Proxy servers have two main purposes: to
      improve performance and to filter requests."[8]

    * Web Servers: "Web servers are computers that deliver (or serve up) Web pages. Every
      Web server has an IP address and possibly a domain name. There are many Web server
      software applications, including public domain software and commercial packages."
      [7] Web servers usually involve a browser (the client) and the server communicating 
      over the HTTP Protocol.

    * Real-Time Communication Server: are sometimes called Chat servers or IRC servers.
      They are used to send and receive instant messages in real time.

    * FTP Server: is one of the oldest types of servers. An FTP server uses the File
      Transfer Protocol (FTP) to send and receive files securely.

    * Collaboration Server: are used to facilitate collaboration for groupware software.

    * Telnet Server: "A Telnet server enables users to log on to a host computer and
      perform tasks as if they're working on the remote computer itself."[9]

    * List Server: "List servers offer a way to better manage mailing lists, whether
      they be interactive discussions open to the public or one-way lists that deliver
      announcements, newsletters or advertising."

    * Application Server: is the server program portion of an application that is divided
      into a multi-tier architecture, as is the case for this project. Application 
      servers host the business logic of your application and expose access to it through 
      APIs to clients. An application server is an environment that provides all the 
      runtime services your application needs. The application server for this project is 
      called 'Hotel-Server'.  


4.3 WHAT IS A WEB SERVER?

A Web Server can refer to a physical machine (or a virtual server running on it) or 
server software running on a server machine. An Mozilla Developer Network article 
describes a hardware web server as follows[10]:


    On the hardware side, a web server is a computer that stores web server software 
    and a website's component files (e.g. HTML documents, images, CSS stylesheets, and
    JavaScript files). It is connected to the Internet and supports physical data
    interchange with other devices connected to the web.


The article describes Web server software like this:


    On the software side, a web server includes several parts that control how web users
    access hosted files, at minimum an HTTP server. An HTTP server is a piece of software
    that understands URLs (web addresses) and HTTP (the protocol your browser uses to 
    view webpages). It can be accessed through the domain names (like mozilla.org) of 
    websites it stores, and delivers their content to the end-user's device.


4.3.1 HOW DOES A WEB SERVER COMMUNICATE OVER THE INTERNET?


        +----------------------+                           +---------------------+
        |      WEB SERVER      |                           |                     |
        | +-------+  +-------+ |        HTTP REQUEST       |                     |
        | |       |  |       | | <-----------------------+ |                     |
        | |       |  |       | |                           |                     |
        | |       |  | HTTP  | |                           |                     |
        | | FILES |  | SERVER| |                           |     WEB BROWSER     |
        | |       |  |       | |       HTTP RESPONSE       |                     |
        | |       |  |       | | +-----------------------> |                     |
        | +-------+  +-------+ |                           |                     |
        |                      |                           |                     |
        +----------------------+                           +---------------------+
                SERVER                                              CLIENT
        

Take a look at this diagram. The MDN article explains how the browser gets a file from a
web server:


    At the most basic level, whenever a browser needs a file which is hosted on a web 
    server, the browser requests the file via HTTP. When the request reaches the correct 
    web server (hardware), the HTTP server (software) accepts request, finds the 
    requested document (if it doesn't then a 404 response is returned), and sends it back 
    to the browser, also through HTTP.


As the article explains, there are some rules to communication over the HTTP protocol:


    * Only clients can make HTTP requests, and then only to servers. Servers can only
      respond to a client's HTTP request.

    * When requesting a file via HTTP, clients must provide the file's URL.

    * The web server must answer every HTTP request, at least with an error message.


The article explains the responsibilities of a Web Server. Note that the term 'HTTP 
Server' is used instead 'Web Server'. There is a distinction between the terms, but here 
you can treat them as the same:


    On a web server, the HTTP server is responsible for processing and answering incoming
    requests.
        1. On receiving a request, an HTTP server first checks whether the requested URL
           matches an existing file.

        2. If so, the web server sends the file content back to the browser. If not, an
           application server builds the necessary file.

        3. If neither process is possible, the web server returns an error message to the
           browser, most commonly "404 Not Found". (That error is so common that many web
           designers spend quite some time designing 404 error pages.)


4.4 CHOICE OF WEB SERVERS

According to w3techs[11], these are the most popular web servers as of 26 July, 2018:


    1. Apache: 45.9%
    2. Nginx: 39.0%
    3. IIS: 9.5%
    4. Litespeed: 3.4%
    

Microsoft-oriented shops tend to use IIS (Internet Information Server), but it's no 
longer the default web server for .NET Core/ASP.NET Core so its market share is 
declining. Linux shops tend to favour Apache, Nginx and Litespeed. Apache has been the 
big dog since 1995, but it consumes much more memory while being much less performant, so 
unsurprisingly, it will probably soon lose its crown in a few years to the new rising 
star, Nginx. 

The default web server for ASP.NET Core programs is Kestrel.


4.5 KESTREL

Stackify has an article that introduces Kestrel[12]:


    Kestrel is open-source (source code available on GitHub), event-driven, asynchronous
    I/O based server used to host ASP.NET applications on any platform. It’s a listening
    server and a command-line interface. You install the listening server on a Windows or
    Linux server and the command-line interface on your computer.

    It was launched by Microsoft along with ASP.NET Core. All ASP.NET Core apps utilize a
    new MVC framework and the Kestrel web server. These new apps can run on full .NET
    Framework or .NET Core...

    Kestrel is considered a preferred web server for newer ASP.NET applications... It is
    based on the libuv library, the same one used by node.js. Libuv supports an
    event-driven style of programming. Some of its core utilities include:

        * Non-blocking network support
        * Asynchronous file system access
        * Timers
        * Child processes

    It allows ASP.NET Core applications to be run easily on other cross-platform 
    webservers such as Nginx and Apache, without the need to address varying startup 
    configurations. By using Kestrel as an in-process server, applications will have a 
    consistent process (Startup (Main(), Startup.ConfigureServices(), Startup.Configure()) ) 
    even with cross-platform support.


However, Kestrel is not a fully-featured web server; it does as little as possible. 
Kestrel developers seem to have optimized for speed by leaving out most of IIS's 
features. So, it sounds as though Kestrel is intended to work as an in-process server, 
with another fully featured web server like Nginx or IIS in front of it for public web 
applications, as Kestrel cannot handle windows authentication, security and other such 
services. When you use another web server in front of Kestrel, that web server is said to 
be a Reverse Proxy Server.

You can configure some of these options in Configure() method of Startup.cs. See 
Microsoft Docs for more details.


****************************************************************************************************
****************************************************************************************************


SOURCES

01: http://owin.org/html/spec/owin-1.0.html#2-definitions
02: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/?view=aspnetcore-2.1
03: https://aspnetcore.readthedocs.io/en/stable/fundamentals/hosting.html
04: https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.webhost?view=aspnetcore-2.1
05: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/web-host?view=aspnetcore-2.1
06: https://www.quora.com/What-is-a-software-server-and-what-are-the-main-differences-between-a-software-server-and-a-hardware-server
07: https://en.wikipedia.org/wiki/Client%E2%80%93server_model
08: https://www.webopedia.com/TERM/S/server.html
09: https://www.webopedia.com/quick_ref/servers.asp
10: https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_web_server
11: https://w3techs.com/technologies/overview/web_server/all
12: https://stackify.com/what-is-kestrel-web-server/