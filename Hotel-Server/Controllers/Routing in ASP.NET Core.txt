ROUTING IN ASP.NET CORE

Hotel-Server is an ASP.NET Core Web API project, which means that it is a program that will run
on the server. It's the duty of Web API projects serve up public resources to clients while
restricting access to private or gated resources. Hotel-Server will serve up resources to
any program that can make HTTP requests to it. Hotel-Server is built to work with Hotel-Client, 
but it can also work with a browser-based JS/WASM web application analoguous to Hotel-Client.

Clients and users can access public resources on a server by calling up a Uniform Resource
Locator (URL). This could be a person typing a URL into a browser-based web application or a
request issued by a client-side application like Hotel-Client. When the client sends a request
for a resource to the server, Hotel-Server will receive this request and process it.

The request is seeking a resource of some kind - a webpage, an image, a video, a document or
another kind of file. Hotel-Server has to process this request, find the resource that is being
sought and return it to the client. Along the way, Hotel-Server needs to determine if the
resource exists and whether the client has access rights to it.

To respond to the request and fulfill it, Hotel-Server's middleware layer must map the URL of the
incoming request to a resource on the server. This process is called ROUTING. To route a URL,
Hotel-Server will use classes called ROUTE HANDLERS to map it to specific Controller actions or
files. 


ANATOMY OF A URL

Before talking about routing, one must understand the anatomy of a URL.

When Hotel-Server runs, it starts listening for incoming requests. A URL for a resource on a Web
API project might look like this: http://localhost:23598/api/. For the sake of explaining the
parts of a URL, look at the default URL for a Web application project:

     http://localhost:23598/Home/Index

    |___|   |________|_____|____|_______|
      |         |       |    |        |
  PROTOCOL     HOST   PORT CONTROLLER INDEX

  |_______________________|________________|
              |                   |
      NETWORK & SERVER           MVC

To understand how routes and routing works, know thebreak down of a URL. These are the parts of 
this URL:

http: is the network PROTOCOL.
localhost: is a universal name for the local computer (HOST) on which the program is run.
23598: is the PORT where IIS (Internet Information Services, a Microsoft web server that comes
       standard on most recent versions of Windows) is hosting this ASP.NET Core application.
       IIS will find an use a port that is not being used to prevent conflicts. 
Home: is a reference to the CONTROLLER class of this name in the application. 
Index: reference to an ACTION method called Index() in the Home Controller class.

The Protocol and the Host are not part of the ASP.NET Core MVC stack. They are managed by your
Network Firewall and Server. Neither of these will be discussed here. When you want to deploy
this program in a production environment, you will have to talk to your company's IT services
to determine the specific URL.

The important takeaway is this: the first part of a URL refers to the protocol and the address
of the host. With this part, you can find a specific server on the internet. Once you find
the server you're want, the second part of the URL refers to resources hosted on that server.

The second part of the URL is comprised of the Controller and Action (Only in the example above. 
There are other parts not shown in this example.). This part of the URL is called a ROUTE,
because it points to resources on the server or to code the server will execute. The MVC
Framework manages the route and maps it to a resource on the server.

In ASP.NET Core Web Applications, most people use both routing templates and attribute routes.
To manage the default route, they can add "app.UseMvcWithDefaultRoute();" to the Configure()
method in Startup.cs. Special cases can be handled with annotating those controllers and methods
with attribute routes.  


CONVENTION-BASED ROUTING: ROUTING TEMPLATES

MVC maps the Home Controller to a Controller and the Index method to an Action through a ROUTING
TEMPLATE. A routing template looks like this:

    {controller}/{action}

A Routing Template is a string with standardized format. In this example, the routing template
requires the controller to come first and is separated from the action by forward slash. If this
routing template is applied to this URL

    http://localhost:23598/Home/Index

Home is the controller and Index is the action method. When a routing template is defined, it
can be given default values like this:

    {controller=Home}/{action=Index}

No controller or action is specified, if the incoming request requests this URL:

    http://localhost:23598

However, the middleware will load the default route, which means that this URL will be returned:

    http://localhost:23598/Home/Index

If you need the action methods in your controller to accept parameters, change the default 
template to something like this:

    {controller=Home}/{action=Index}/{id?}

In the context of routing templates, the Id field is a generic reference to a parameter name. 
Adding Id to the routing template will let the client provide an argument to a parameter called
Id in the Index() method. In a real routing template, replace the "Id" value with the paramter's
name. The question mark indicates that the Id value is optional.

Routing templates are defined in the Configure() method of the Startup.cs file. Here is sample
default routing template for a Web Application project:

    public void Configure(IApplicationBuilder app)
    {
        app.UseIISPlatformHandler();
        app.UseRunTimeInfoPage();

        app.UseMvc
        (
            routes =>
            {
                // The Default Routing Template:
                routes.MapRoute("Default", "{controller = Home}/{action = Index}");
            }
        )
    };

It's possible to declare more than one routing template, like this:

    routes =>
    {
        routes
               // The Default Routing Template:
               .MapRoute("Default", "{controller = Home}/{action = Index}");
               // The Default Template for the Members Page:  
               .MapRoute("Members", "Members/{controller = MemberHome}/{action = Index}/{id?});
    };

The Members routing template kicks in when one of these URLs are requested:

    http://localhost:23598/Members
    http://localhost:23598/Members/MemberHome
    http://localhost:23598/Members/MemberHome/Index
    http://localhost:23598/Members/MemberHome/Index/10

There is but one default Members page and it will be loaded for all these requests.


ATTRIBUTE ROUTING: THE ROUTE ATTRIBUTE

Routing templates centralize routing information in Startup.cs. There is an alternative to using
routing templates: Attribute Routing. In this way of doing routing, to specify their routes,
controller classes and action methods are annotated with Route Attributes. This is usually done
by declaring things in square brackets just above a class or method. Example:

    [Route("")]
    [Route("All")]
    public class AllControllers : Controller
    {
        [Route("Index")]
         public IActionResult Index()
         {
             return View;
         }
    }

When you specify the name of a controller or action in an attribute, you are directing the
program to expect these route values in the URL. This example code is routed in such a way that
the URL would look like this:

    http://localhost:23598/All/Index/

A blank route string denotes a default controller or action. If the URL contains the world "All"
after the hostname, the program will search attribute routes for the "All" route attribute.
If such a route is found, the program will interpret this to mean that the URL is referring to
the AllControllers class. 

Attribute routing requires you to annotate virtually every class and method with an attribute,
but it is preferred by some people because routing information is visible right above the class
or method declaration.

There is a variation of attribute routing, where one can use generic tokens like [controller] or
[action] in place of specific strings within Route Attributes. If you use tokens, you're
designating the name of aclass or method as the route values to expect in the URL. This way
has similarities  to routing templates. For the URL from the last example, this is the attribute
declaration using tokens:

    [Route("")]
    [Route("[controller]")]
    public class AllControllers : Controller
    {
        [Route("[action]")]
         public IActionResult Index()
         {
             return View;
         }
    }
    
See this project for more information about routing: ASPNETCore WebApp 1A - Routing.